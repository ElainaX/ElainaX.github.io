<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#222"><meta http-equiv="X-UA-COMPATIBLE" content="IE=edge,chrome=1"><meta name="renderer" content="webkit"><link rel="icon" type="image/ico" sizes="32x32" href="/assets/favicon.ico"><link rel="apple-touch-icon" sizes="180x180" href="/assets/apple-touch-icon.png"><link rel="alternate" href="/rss.xml" title="ElainaX Blog" type="application/rss+xml"><link rel="alternate" href="/atom.xml" title="ElainaX Blog" type="application/atom+xml"><link rel="alternate" type="application/json" title="ElainaX Blog" href="https://elainax.github.io/feed.json"><link rel="preconnect" href="https://lf9-cdn-tos.bytecdntp.com"><link rel="preconnect" href="https://at.alicdn.com"><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mulish:400,400italic,700,700italic%7CFredericka%20the%20Great:400,400italic,700,700italic%7CNoto%20Serif%20JP:400,400italic,700,700italic%7CNoto%20Serif%20SC:400,400italic,700,700italic%7CInconsolata:400,400italic,700,700italic&amp;display=swap&amp;subset=latin,latin-ext" media="none" onload="this.media='all'"><link rel="stylesheet" href="/css/app.css?v=0.4.2"><link rel="modulepreload" href="/js/chunk-BDQA5RLF.js"><link rel="modulepreload" href="/js/chunk-ET6W6GW2.js"><link rel="modulepreload" href="/js/chunk-NLXBEIWV.js"><link rel="modulepreload" href="/js/chunk-S3TEL5AN.js"><link rel="modulepreload" href="/js/chunk-Y5PO72YU.js"><link rel="modulepreload" href="/js/comments-XRFCTZLS.js"><link rel="modulepreload" href="/js/index.esm-LR44PBXH.js"><link rel="modulepreload" href="/js/post-5AZJ2MKJ.js"><link rel="modulepreload" href="/js/quicklink-WNUTBLBX.js"><link rel="modulepreload" href="/js/search-P6S3L2ET.js"><link rel="modulepreload" href="/js/siteInit.js"><link rel="stylesheet" href="https://npm.webcache.cn/@waline/client@3.0.0-alpha.11/dist/waline.css" media="none" onload="this.media='all'"><link rel="preload" href="h" as="image" fetchpriority="high"><link rel="preload" href="t" as="image" fetchpriority="high"><link rel="preload" href="t" as="image" fetchpriority="high"><link rel="preload" href="p" as="image" fetchpriority="high"><link rel="preload" href="s" as="image" fetchpriority="high"><link rel="preload" href=":" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="s" as="image" fetchpriority="high"><link rel="preload" href="2" as="image" fetchpriority="high"><link rel="preload" href="." as="image" fetchpriority="high"><link rel="preload" href="l" as="image" fetchpriority="high"><link rel="preload" href="o" as="image" fetchpriority="high"><link rel="preload" href="l" as="image" fetchpriority="high"><link rel="preload" href="i" as="image" fetchpriority="high"><link rel="preload" href="." as="image" fetchpriority="high"><link rel="preload" href="n" as="image" fetchpriority="high"><link rel="preload" href="e" as="image" fetchpriority="high"><link rel="preload" href="t" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="2" as="image" fetchpriority="high"><link rel="preload" href="0" as="image" fetchpriority="high"><link rel="preload" href="2" as="image" fetchpriority="high"><link rel="preload" href="4" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="0" as="image" fetchpriority="high"><link rel="preload" href="4" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="1" as="image" fetchpriority="high"><link rel="preload" href="3" as="image" fetchpriority="high"><link rel="preload" href="/" as="image" fetchpriority="high"><link rel="preload" href="Q" as="image" fetchpriority="high"><link rel="preload" href="9" as="image" fetchpriority="high"><link rel="preload" href="y" as="image" fetchpriority="high"><link rel="preload" href="C" as="image" fetchpriority="high"><link rel="preload" href="M" as="image" fetchpriority="high"><link rel="preload" href="4" as="image" fetchpriority="high"><link rel="preload" href="v" as="image" fetchpriority="high"><link rel="preload" href="s" as="image" fetchpriority="high"><link rel="preload" href="Y" as="image" fetchpriority="high"><link rel="preload" href="m" as="image" fetchpriority="high"><link rel="preload" href="r" as="image" fetchpriority="high"><link rel="preload" href="P" as="image" fetchpriority="high"><link rel="preload" href="f" as="image" fetchpriority="high"><link rel="preload" href="i" as="image" fetchpriority="high"><link rel="preload" href="3" as="image" fetchpriority="high"><link rel="preload" href="." as="image" fetchpriority="high"><link rel="preload" href="p" as="image" fetchpriority="high"><link rel="preload" href="n" as="image" fetchpriority="high"><link rel="preload" href="g" as="image" fetchpriority="high"><meta name="keywords" content="杂谈,template,"><meta name="description" content="Record Every Funny Knowledge Ever Meet!"><link rel="canonical" href="https://elainax.github.io/C++%E5%8F%8D%E5%B0%84%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8"><title>C++反射初探（一）模板介绍与使用</title><meta name="generator" content="Hexo 7.0.0"></head><body itemscope="" itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope="" itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">C++反射初探（一）模板介绍与使用</h1><div class="meta"><span class="item" title="创建时间：2024-04-13 00:00:00"><span class="icon"><i class="ic i-calendar"></i></span><span class="text">发表于</span><time itemprop="dateCreated datePublished" datetime="2024-04-13T00:00:00+08:00">2024-04-13</time></span><span class="item" title="本文字数"><span class="icon"><i class="ic i-pen"></i></span><span class="text">本文字数</span><span>12k</span><span class="text">字</span></span><span class="item" title="阅读时长"><span class="icon"><i class="ic i-clock"></i></span><span class="text">阅读时长</span><span>11 分钟</span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切换导航栏"><span class="line"></span><span class="line"></span><span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/" rel="start">以真理为友</a></li></ul><ul class="right" id="rightNav"><li class="item theme"><i class="ic i-sun"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div class="pjax" id="imgs"><img src="https://s2.loli.net/2024/04/13/Q9yCM4vsYmrPfi3.png" loading="eager" decoding="async" fetchpriority="high" alt="ElainaX Blog"></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"></use><use xlink:href="#gentle-wave" x="48" y="3"></use><use xlink:href="#gentle-wave" x="48" y="5"></use><use xlink:href="#gentle-wave" x="48" y="7"></use></g></svg></div><main><div class="inner"><div class="pjax" id="main"><div class="article wrap"><div class="breadcrumb" itemlistelement="" itemscope="" itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i><span><a href="/">首页</a></span><i class="ic i-angle-right"></i><span itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/categories/computer-science/" itemprop="item" rel="index" title="分类于计算机"><span itemprop="name">计算机<meta itemprop="position" content="0"></span></a></span><i class="ic i-angle-right"></i><span itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/categories/computer-science/cpp/" itemprop="item" rel="index" title="分类于C++"><span itemprop="name">C++<meta itemprop="position" content="1"></span></a></span><i class="ic i-angle-right"></i><span class="current" itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/categories/computer-science/cpp/cpp-reflection/" itemprop="item" rel="index" title="分类于C++反射"><span itemprop="name">C++反射<meta itemprop="position" content="2"></span></a></span></div><article class="post block" itemscope="itemscope" itemtype="http://schema.org/Article" lang="zh-CN"><link itemprop="mainEntityOfPage" href="https://elainax.github.io/C++%E5%8F%8D%E5%B0%84%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8"><span hidden="hidden" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="image" content="/assets/avatar.jpg"><meta itemprop="name" content="ElainaX"><meta itemprop="description" content="Enjoy Your Life, Record Every Funny Knowledge Ever Meet!"></span><span hidden="hidden" itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="ElainaX Blog"></span><div class="body md" itemprop="articleBody"><h4 id="前言"><a class="anchor" href="#前言">#</a> 前言</h4>
<p>在学习 C++ 反射相关知识的时候，作者发现在很多实现中都运用了极其复杂的 C++ 模板技巧，作为一位仅对 C++ 模板有入门级认识的初学者来说，阅读这些代码尤其头疼，因此特意去补充了一些模板编程的知识，以此作为整个反射系列学习笔记的基础。本文主要内容参考<a target="_blank" rel="noopener" href="https://www.zhihu.com/people/75-49-80-77/posts">知乎 YKIKO 大佬</a>的模板系列文章，并在此基础上详细解释每个涉及到的知识点，如果读者擅长模板元编程方面的常用编程技巧，大可跳过这一章。</p>
<p><strong>如何去学习模板编程</strong></p>
<p>不知道各位在初学模板时有没有这种困惑，我们学习大量大量的 template 技巧，但是却不知道该在什么场景下使用。久而久之，虽然学了一身屠龙技巧，但是无从施展，渐渐的也就把这些知识淡忘了。所以对于模板的学习来说，个人认为最好的学习方法就是场景化学习，即：首先确定一个应用方向，然后探索与这个方向有关的模板编程技术，在练习和应用中学习，比起空学理论更能让人影响深刻。</p>
<p>那么对于学习模板编程随之而来的反问就是：</p>
<p><strong>「我们能用模板做些什么事情」</strong></p>
<p>今天我们主要讨论可以用模板实现的四个主题：</p>
<ul>
<li>
<p>控制代码生成，实现类型的泛化</p>
</li>
<li>
<p>做泛型约束，方便编译期检查错误</p>
</li>
<li>
<p>编译期计算表达式（数值）</p>
</li>
<li>
<p>编译期计算类型</p>
</li>
</ul>
<p>第一个主题就是模板的最正确的使用方式，也是模板被发明的初衷，而后三者则是模板元编程（也就是 TMP）的范畴，属于 C++ 中模板的衍生用法，因此代码写起来也是晦涩难懂。</p>
<h4 id="类型泛化"><a class="anchor" href="#类型泛化">#</a> 类型泛化</h4>
<p>在古早的 C ++ 代码中（C++ 11 之前），如果你想要实现编写一个支持打印所有类型值的函数（保证这些值都重载了 "&lt;&lt;" 运算符），由于没有模板的存在，那么你大概率会使用宏写出这样的代码：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/cnoI9Tv145LHEkU.png" alt="image-20240413091220474"></p>
<p>这样的代码非常不直观，同时也没法调试，我们首先定义了一个 print (T) 宏，这个宏实际会被解析成我们的函数签名_print_impl_T，然后我们显式调用定义的另一个宏 _print_impl (T) 来实际实现我们目标函数的定义。</p>
<p>所幸有了模板，我们可以更改代码为以下更好懂也更好调试的形式：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/lKAGXIo5BWmhQ9v.png" alt="image-20240413092300221"></p>
<p>由此我们就可以得到模板在进行类型泛化时的好处：</p>
<ul>
<li>模板是占位符，不需要使用字符串拼接，代码可读性高</li>
<li>模板由标准支持，因此编译期可进行调试，类型不匹配时也会显示对应信息</li>
<li>既可以自动推导模板参数可以显式指明模板参数</li>
<li>可以使用偏特化，全特化等特点进行显示实例化，即对特定类型特质化函数实现</li>
</ul>
<h4 id="对类型做约束减少无效报错信息"><a class="anchor" href="#对类型做约束减少无效报错信息">#</a> 对类型做约束，减少无效报错信息</h4>
<p>说起无效报错，就不得不提起 C++ 中的函数重载了，当执行某个函数的时候，对于用户输入的参数，编译器会一一比对所有可能匹配到输入参数类型的函数，并从中挑选出匹配度最高（遵从一套规则）的函数进行函数调用，那么如果所有的重载函数都无法匹配到当前用户输入的类型呢？不妨来看下面这个例子</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/hK2D93lxSIp54Eg.png" alt="image-20240413094949497"></p>
<p>虽然 MSVC 的编译器会在代码提示阶段就给出错误信息，但是为了说明问题的关键，我们还是尝试编译该文件，那么就会得到如下错误信息：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/EystfQJB5ld4OYv.png" alt="image-20240413095228780"></p>
<p>可以看出，编译器首先会列举出它所尝试的所有函数重载，然后再一一比对，每次如果不匹配则会输出一条 message：无法从 “A” 转换为 “&lt;other type&gt;”，这样就会出现大量的冗余报错信息，而实际有用的信息可能只有最上面标红的 error，编译器的这种行为也给了我们某种减少报错的提示：尽可能在实例化类型进行<mark>函数重载类型参数比较</mark>前先确定好当前类型的元素是否已有重载函数类型可以匹配。</p>
<h6 id="模板"><a class="anchor" href="#模板">#</a> 模板</h6>
<p>换言之，在模板函数中，如果你写出如下代码：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/mRZLoi2H6NhVjMx.png" alt="image-20240413095806712"></p>
<p>假设此时我们没有实现 cout 函数重载 A 类型，那么编译器经过的过程就是：模板类型匹配成功 → T 被替换为 A → a 被实例化为 A 类型对象 → cout 去查询所有可能匹配 A 参数的函数重载。由上一节的分析我们知道，这样会输出大量无用报错信息。</p>
<p>可不可以利用模板来对传入的类型进行约束，比如如果发现匹配的类型没有重载 cout 的时候就直接输出类型不匹配信息而不进行实例化呢？当然可以！</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/sALjcFpdfy8XBvm.png" alt="image-20240413100241049"></p>
<p>如图，在以上代码中，我们在模板匹配参数时，使用 requires 语句（C++ 20 标准引入），来强制使模板的参数匹配只会在 T 类型对象存在 cout 重载时生效，如此一来就不会进入到复杂的函数重载匹配报错上，我们程序的编译报错信息就只有短短几行：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/uL4wVb9HIzqSnrY.png" alt="image-20240413100415317"></p>
<p>非常的亲民！</p>
<p>这种 “使报错信息更友好” 的技术叫做 SFINAE，关于 SFINAE 和 requires 语句的参考使用方法，可以观看<a target="_blank" rel="noopener" href="https://mp.weixin.qq.com/s/Le6iSj1vALVg4ldmRJqaXQ">这个系列的微信小文章</a>了解。</p>
<h4 id="编译期数值计算"><a class="anchor" href="#编译期数值计算">#</a> 编译期数值计算</h4>
<p>作为编译期数值计算入门级的例子，我们给出如下程序进行编译期计算阶乘</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/vb7AuNz6SMXrP1B.png" alt="image-20240413103649639"></p>
<p>由于 enum 中的值是一个编译期常量，因此我们的代码甚至可以在 C++ 11 之前的版本跑通，那时候还没有特别好的表达编译期常量的概念，因此只能借用 enum 来表达实现。而在 C++ 11 支持 constexpr 关键词后，我们可以这么写：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/Jnc1KA5oLIP6tXG.png" alt="image-20240413103922018"></p>
<p>如此虽然方便，但实际上仍然是借助模板来进行编译期计算，这样写出的代码非常难懂，且只能通过像图中递归而非循环的方式来进行编程。</p>
<p>constexpr 函数的出现就是为了解决上述问题，使用 constexpr 函数，我们可以使用如下更简洁清晰的代码来完成阶乘功能编写：</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/iUCZR53lDBvgzJX.png" alt="image-20240413104633868"></p>
<p>这种做法在 C++ 中非常常见且好用，用户根本不需要去写复杂的模板元编程，在 C++ 20 之后几乎所有的标准库函数也都是 constexpr 的了，我们可以轻松的调用它们，比如可以做到编译期排序等操作。</p>
<p><img loading="lazy" data-src="https://s2.loli.net/2024/04/13/oQGYpCRvF26iIaP.png" alt="image-20240413104954347"></p>
<p>读者如果想验证是否是编译期进行的排序，可以打开编译的 release 设置，然后在变量 arr 出打一个断点，会发现程序并不会在 arr 处逗留，因为编译器把此处的代码在编译期就优化掉了（也就是提前排序）。</p>
<p>相信你已经充分见识到 C++ 在编译期计算方面所做的努力，编译期计算早就和模板元脱离关系了，在 C++ 中已经成为一种非常自然的特性，不需要特殊的语法，却能发挥强大的威力。所以以后千万不要一谈到 C++ 的编译期计算就十分恐慌，以为是什么屠龙之技。现在它早已经变得十分温柔美丽。</p>
<h4 id="编译期类型计算"><a class="anchor" href="#编译期类型计算">#</a> 编译期类型计算</h4>
<h5 id="无法迈过的坎"><a class="anchor" href="#无法迈过的坎">#</a> 无法迈过的坎</h5>
<p>尽管编译期计算已经脱离了模板元的魔爪，但是 C++ 还没有，有两种情况我们不得不编写蹩脚的模板元代码，其中一种情况就是编译期类型计算。</p>
<h6 id="对类型做计算"><a class="anchor" href="#对类型做计算">#</a> 对类型做计算</h6>
<p>在 C++ 中，如果你想比较两个变量的类型是否相等，我们不得不写出如下代码：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">constexpr</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>也就是说，类型只能存于模板参数里，这就使得上一节提到的编译期计算的优势全部消失，不得不取而代之以丑陋的模板元编程技巧。</p>
<p>观察下列判断两个 type_list 满不满足子序列关系的代码：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Ts<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">type_list</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">SubFirst</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>SubRest<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">SuperFirst</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>SuperRest<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">is_subsequence_of_impl</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span>SubFirst<span class="token punctuation">,</span> SubRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span>SuperFirst<span class="token punctuation">,</span> SuperRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>SubFirst<span class="token punctuation">,</span> SuperFirst<span class="token operator">&gt;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>SubRest<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span>SubRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span>SuperRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>SuperRest<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span>SubFirst<span class="token punctuation">,</span> SubRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span>SuperRest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Sub<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Super<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span>Sub<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span>Super<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Super<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">is_subsequence_of_impl</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span>Sub<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span>Super<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>type_list<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> type_list<span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>写起来非常难受，如果可以把类型存储在某些数据结构中，而不是只能存储在模板参数里，那么我们代码的编写就会方便很多：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_subsequence_of</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">,</span> <span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> super<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    std<span class="token double-colon punctuation">::</span>size_t index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t i <span class="token operator">=</span> index<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> super<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>super<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            index<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">}</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">}</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> index <span class="token operator">==</span> sub<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>array<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_subsequence_of</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>array<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><p>瞬间清爽一万倍，但仅仅因为就 C++ 本身而言，把类型当作值这样的改动是完全不可接受的，因此以后也不会有什么大的改变，这一事实真是令人悲伤，不过好在 C++ 的代码虽然难看，但好歹能写。</p>
<p>这里还可以有另一条路走。就是通过一些手段把类型映射到值。例如把类型映射到字符串，匹配类型可以类似于匹配字符串，只要对字符串进行计算就好了，也能实现一定程度上的 <code>type as value</code> 。C++ 23 之前并没有标准化的手段进行这种映射，通过一些特殊的编译器扩展能做到。</p>
<p>我们从一个具体应用入手来说明如何将某些值映射到字符串 —— 在 C++ 中优雅的进行 <code>enum</code>  到 <code>string</code>  的转换。</p>
<h6 id="c-中如何优雅的进行enum到string的转换"><a class="anchor" href="#c-中如何优雅的进行enum到string的转换">#</a> C++ 中如何优雅的进行 <code>enum</code>  到 <code>string</code>  的转换？</h6>
<p>拿到这个问题，大部分人可能第一反应就是用一个 <code>map</code>  进行映射打表，硬编码的方法有一个最大问题就是可维护性和可扩展性极差，在只有几个枚举量的时候还算好用，一旦枚举量增加，代码就会变的臃肿累赘。为此，我们需要探索一种<span class="rainbow">可持续发展</span>的做法一劳永逸。</p>
<p><strong>使用宏和模板进行打表</strong></p>
<p>这一小节介绍的内容已经有人提前封装好了，可以直接使用 <a href="https://link.zhihu.com/?target=https%3A//github.com/Neargye/magic_enum">magic enum</a> 这个库。下面主要是对这个库的原理进行解析，为了方便展示，将用 C++ 20 实现，实际上 C++ 17 就可以。</p>
<p>在三大主流编译器中，有一些特殊的宏变量，比如 GCC 和 Clang 中的 <code>__PRETTY_FUNCTION__</code> ，MSVC 中的 <code>__FUNCSIG__</code> 。这几个宏变量会<ins class="dot warning">在编译期间被替换</ins>成函数的签名，如果该函数是模板函数则会将模板实例化的信息也一并输出（ C++ 20 加入标准的 source_location，他也具有和这些宏类似的效果）</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">auto</span> T<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">print_fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__GNUC__ <span class="token operator">||</span> __clang__</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> __PRETTY_FUNCTION__ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">_MSC_VER</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> __FUNCSIG__ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    RED<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    GREEN<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    BLUE</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token generic-function"><span class="token function">print_fn</span><span class="token generic class-name"><span class="token operator">&lt;</span>RED<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// gcc and clang =&gt; void print_fn() [with auto T = RED]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// msvc =&gt; void __cdecl print_fn&lt;RED&gt;(void)</span></pre></td></tr></tbody></table></figure><p>可以发现，我们想要的结果在 <code>msvc</code>  中就刚刚好出现在 "&lt;""&gt;" 包裹的内部，于是我们就可以用简单的编译期字符串查找操作（之前说过，Cpp 标准库大多数函数都在 17 标准之后支持了编译期解析特性）来得到感兴趣的内容：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">auto</span> value<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">enum_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    std<span class="token double-colon punctuation">::</span>string_view name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__GNUC__ <span class="token operator">||</span> __clang__</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    name <span class="token operator">=</span> __PRETTY_FUNCTION__<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    std<span class="token double-colon punctuation">::</span>size_t start <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'='</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    std<span class="token double-colon punctuation">::</span>size_t end <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    name <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">{</span> name<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    start <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">_MSC_VER</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    name <span class="token operator">=</span> __FUNCSIG__<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    std<span class="token double-colon punctuation">::</span>size_t start <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'&lt;'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    std<span class="token double-colon punctuation">::</span>size_t end <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"&gt;("</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    name <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">{</span> name<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    start <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> start <span class="token operator">==</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos <span class="token operator">?</span> name <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">{</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            name<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">-</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>这里用 <code>string_view</code>  最重要的原因是我们的函数是编译期函数，因此所有涉及的字符串都应当是字面值字符串或是常量字符数组，因此使用 <code>string_view</code>  可以快速操作这些常量，且安全可靠。</p>
<p>这样我们就可以实现在<ins class="dot warning">编译期</ins>进行枚举类字符串的打印了，但是，等等？运行期怎么办呢？假如我们有以下场景：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">Color</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	RED<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    BLUE<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    GREEN</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Color c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// Do SomeThing to Color(c)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    </pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 我们希望打印出 c 对应的枚举字符串</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>最直接的想法就是，首先在编译期记录下每个枚举常量的值对应的字面值，然后把结果储存成一张表格以备运行期使用，这种想法是可以的，我们可以简单实现一下。</p>
<p>首先在枚举类的最后加一个新的枚举常量 Count，这个变量记录了我枚举类的大小（假设枚举类中枚举值是连续的），或者不加枚举变量，使用模板来在编译期获取 enum 类的枚举常量数量（如下）。</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">enum_max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">constexpr</span> <span class="token keyword">auto</span> value <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">enum_name</span><span class="token generic class-name"><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">enum_max</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>这样我们就可以在编译期通过 <code>make_index_sequence</code>  生成一个对应的长度数组即可</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">requires</span> std<span class="token double-colon punctuation">::</span>is_enum_v<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">enum_name</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">constexpr</span> <span class="token keyword">auto</span> num <span class="token operator">=</span> <span class="token generic-function"><span class="token function">enum_max</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">constexpr</span> <span class="token keyword">auto</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Is<span class="token operator">&gt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>index_sequence<span class="token operator">&lt;</span>Is<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> num<span class="token operator">&gt;</span><span class="token punctuation">{</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token generic-function"><span class="token function">enum_name</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Is<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">}</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>make_index_sequence<span class="token operator">&lt;</span>num<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> names<span class="token punctuation">[</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>这里有必要解释一下代码中的 <code>names</code>  常量，首先它是一个模板 <code>lambda</code>  表达式的<span class="red">返回值</span>，模板参数是 <code>&lt;std::size_t …Is&gt;</code> ，接受一个 <code>std::index_sequence&lt;Is…&gt;</code>  参数，函数体中，我们返回一个 <code>array</code> ，这个数组的内容是每个枚举类常量的字面值，数组的生成利用了函数参数包解析， <code>enum_name&lt;(T)(Is)&gt;()...</code>  会被解析成 <code>enum_name&lt;(T)(Is)&gt;, enum_name&lt;(T)(Is-1)&gt;, ..., 0</code> ，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>s</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">Is = num-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，这个 <code>lambda</code>  表达式在创建后立刻被使用，传入参数为 <code>std::make_index_sequence&lt;num&gt;{}</code>  即一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, num-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的模板序列。关于 <code>std::make_index_sequence&lt;&gt;</code>  的详细内容可以参考<a target="_blank" rel="noopener" href="https://www.cnblogs.com/happenlee/p/14219925.html">这个博客</a>。</p>
<p>这种方法的缺点很明显，通过模板实例化来打表，其实会很大的拖慢编译速度。如果 <code>enum</code>  中的数量较多，在一些对常量求值效率较低的编译器上，如 MSVC，可能会增加<strong>几十秒甚至更长</strong>的编译时间。所以一般只适用于小型枚举。优点是轻量级，开箱即用，其它的什么也不用做。</p>
<p><strong>外部代码生成</strong></p>
<p>众所周知，C++ 中处理字符串是一件很麻烦的事情，但是 python 则恰恰相反，python 提供了非常多操作字符串的方法，因此我们可以利用 python 脚本生成 C++ 相关的代码（比如打表），并将代码提供给 C++ 以供运行期使用！我们使用 <code>libclang</code>  的 <code>python bind</code>  轻松的完成这项工作。具体如何配置和使用这个工具，可以参考这篇文章，下面展示最终效果的代码</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token module">clang<span class="token punctuation">.</span>cindex</span> as CX</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>def <span class="token function">generate_enum_to_string</span><span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token operator">:</span> CX<span class="token punctuation">.</span>Cursor<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    branchs <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> child in <span class="token keyword">enum</span><span class="token punctuation">.</span><span class="token function">get_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        branchs <span class="token operator">+=</span> f<span class="token number">'</span><span class="token keyword">case</span> <span class="token punctuation">{</span>child<span class="token punctuation">.</span>enum_value<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"{child.spelling}"</span><span class="token punctuation">;</span>\n<span class="token number">'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    code <span class="token operator">=</span> f<span class="token string">""</span>"</pre></td></tr><tr><td data-num="8"></td><td><pre>std<span class="token double-colon punctuation">::</span>string_view <span class="token punctuation">{</span><span class="token keyword">enum</span><span class="token punctuation">.</span>spelling<span class="token punctuation">}</span><span class="token function">_to_string</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">enum</span><span class="token punctuation">.</span>spelling<span class="token punctuation">}</span> value<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">""</span>"</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> code</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>def <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token operator">:</span> CX<span class="token punctuation">.</span>Cursor<span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> node<span class="token punctuation">.</span>kind <span class="token operator">==</span> CX<span class="token punctuation">.</span>CursorKind<span class="token punctuation">.</span>ENUM_DECL<span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">generate_enum_to_string</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> child in node<span class="token punctuation">.</span><span class="token function">get_children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>index <span class="token operator">=</span> CX<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>tu <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token char">'main.cpp'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">traverse</span><span class="token punctuation">(</span>tu<span class="token punctuation">.</span>cursor<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>测试代码</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">// main.cpp</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    RED<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    GREEN<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    BLUE</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><p>最后生成的代码如下</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>std<span class="token double-colon punctuation">::</span>string_view <span class="token function">enum_to_string</span><span class="token punctuation">(</span>Color value<span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">switch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"RED"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"BLUE"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"GREEN"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>优点，非侵入式，可以用于大数量的枚举。缺点，有外部依赖，需要将代码生成加入到编译流程里面。可能会使编译流程变得很复杂。</p>
<p><strong>侵入式宏</strong></p>
<p>上面的两种方式都是非侵入式的。也就是说，可能你拿到了一个别人的库，不能修改它的代码，只好这么做了。如果是完全由自己定义枚举呢？其实可以在定义阶段就特殊处理，以方便后续的使用。比如（代码开头的注释表示当前文件名）：</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">// Color.def</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">COLOR_ENUM</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR_ENUM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">COLOR_ENUM</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">COLOR_ENUM</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">COLOR_ENUM</span><span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">COLOR_ENUM</span></span></pre></td></tr></tbody></table></figure><p>然后在要使用的地方，通过修改宏定义来生成代码就行了</p>
<figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">// Color.h</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR_ENUM</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token punctuation">,</span></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Color.def"</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>std<span class="token double-colon punctuation">::</span>string_view <span class="token function">color_to_string</span><span class="token punctuation">(</span>Color value<span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">switch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COLOR_ENUM</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">case</span> x<span class="token operator">:</span> <span class="token keyword">return</span> #x<span class="token punctuation">;</span></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Color.def"</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">}</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>这样的话，只要在 <code>def</code>  文件里面进行相关的增加和修改就行了。之后如果要遍历 <code>enum</code>  什么的，也可以直接定义一个宏来生成代码就行了，非常方便。事实上，对于大数量的枚举，有很多开源项目都采取这种方案。例如 clang 在定义 <code>TokenKind</code>  的时候，就是这么做的，相关的代码请参考 <a href="https://link.zhihu.com/?target=https%3A//github.com/stuartcarnie/clang/blob/master/include/clang/Basic/TokenKinds.def">Token.def</a>。由于 clang 要适配多种语言前端，最后总计的 <code>TokenKind</code>  有几百个之多。如果不这样做，进行 <code>Token</code>  的增加和修改会十分困难。</p>
<h4 id="总结"><a class="anchor" href="#总结">#</a> 总结</h4>
<ol>
<li>
<p>非侵入式且枚举数量较少，编译速度不是很重要，那就使用模板打表（至少要求 C++17）</p>
</li>
<li>
<p>非侵入式且枚举数量较多，编译速度很重要，那就使用外部代码生成</p>
</li>
<li>
<p>侵入式，可以直接使用宏</p>
</li>
</ol>
<div class="tags"><a href="/tags/%E6%9D%82%E8%B0%88/" rel="tag"><i class="ic i-tag"></i>杂谈</a><a href="/tags/cpp/" rel="tag"><i class="ic i-tag"></i>cpp</a><a href="/tags/template/" rel="tag"><i class="ic i-tag"></i>template</a><a href="/tags/reflection/" rel="tag"><i class="ic i-tag"></i>reflection</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i></span><span class="text">更新于</span><time title="修改时间：2024-04-26 18:26:15" itemprop="dateModified" datetime="2024-04-26T18:26:15+08:00">2024-04-26</time></span></div><div class="reward"><button><i class="ic i-heartbeat"></i>赞赏</button><p>请我喝[茶]~(￣▽￣)~*</p><div id="qr"><div><img loading="lazy" data-src="/assets/wechatpay.webp" alt="ElainaX 微信支付"><p>微信支付</p></div><div><img loading="lazy" data-src="/assets/alipay.webp" alt="ElainaX 支付宝"><p>支付宝</p></div></div></div><div id="copyright"><ul><li class="author"><strong>本文作者：</strong>ElainaX<i class="ic i-at"><em>@</em></i>ElainaX Blog</li><li class="link"><strong>本文链接：</strong><a href="https://elainax.github.io/C++%E5%8F%8D%E5%B0%84%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8" title="C++反射初探（一）模板介绍与使用">https://elainax.github.io/C++反射初探（一）模板介绍与使用</a></li><li class="license"><strong>版权声明：</strong>本站所有文章除特别声明外，均采用 <a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</a> 许可协议。转载请注明出处！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"></div><div class="item right"><a href="/2024%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86%E5%BD%95" rel="next" itemprop="url" data-background-image="https://cdn.sa.net/2024/04/26/rTF2BuQVL9lY51p.png" title="2024暑期实习面试回忆录"><span class="type">下一篇</span><span class="category"><i class="ic i-flag"></i>杂谈</span><h3>2024暑期实习面试回忆录</h3></a></div></div></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目录"><ol class="toc"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%89%8D%E8%A8%80"><span class="toc-number">1.</span> <span class="toc-text"> 前言</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%B1%BB%E5%9E%8B%E6%B3%9B%E5%8C%96"><span class="toc-number">2.</span> <span class="toc-text"> 类型泛化</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%AF%B9%E7%B1%BB%E5%9E%8B%E5%81%9A%E7%BA%A6%E6%9D%9F%E5%87%8F%E5%B0%91%E6%97%A0%E6%95%88%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF"><span class="toc-number">3.</span> <span class="toc-text"> 对类型做约束，减少无效报错信息</span></a><ol class="toc-child"><li class="toc-item toc-level-6"><a class="toc-link" href="#%E6%A8%A1%E6%9D%BF"><span class="toc-number">3.0.1.</span> <span class="toc-text"> 模板</span></a></li></ol></li></ol><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%BC%96%E8%AF%91%E6%9C%9F%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97"><span class="toc-number">4.</span> <span class="toc-text"> 编译期数值计算</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%BC%96%E8%AF%91%E6%9C%9F%E7%B1%BB%E5%9E%8B%E8%AE%A1%E7%AE%97"><span class="toc-number">5.</span> <span class="toc-text"> 编译期类型计算</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#%E6%97%A0%E6%B3%95%E8%BF%88%E8%BF%87%E7%9A%84%E5%9D%8E"><span class="toc-number">5.1.</span> <span class="toc-text"> 无法迈过的坎</span></a><ol class="toc-child"><li class="toc-item toc-level-6"><a class="toc-link" href="#%E5%AF%B9%E7%B1%BB%E5%9E%8B%E5%81%9A%E8%AE%A1%E7%AE%97"><span class="toc-number">5.1.1.</span> <span class="toc-text"> 对类型做计算</span></a></li><li class="toc-item toc-level-6"><a class="toc-link" href="#c-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%9B%E8%A1%8Cenum%E5%88%B0string%E7%9A%84%E8%BD%AC%E6%8D%A2"><span class="toc-number">5.1.2.</span> <span class="toc-text"> C++ 中如何优雅的进行 enum  到 string  的转换？</span></a></li></ol></li></ol></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%80%BB%E7%BB%93"><span class="toc-number">6.</span> <span class="toc-text"> 总结</span></a></li></div><div class="related panel pjax" data-title="系列文章"><ul><li class="active"><a href="/C++%E5%8F%8D%E5%B0%84%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8" rel="bookmark" title="C++反射初探（一）模板介绍与使用">C++反射初探（一）模板介绍与使用</a></li></ul></div><div class="overview panel" data-title="站点概览"><div class="author" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><img class="image" loading="lazy" decoding="async" itemprop="image" alt="ElainaX" src="/assets/avatar.webp"><p class="name" itemprop="name">ElainaX</p><div class="description" itemprop="description">Record Every Funny Knowledge Ever Meet!</div></div><nav class="state"><div class="item posts"><a href="/archives/"><span class="count">7</span><span class="name">文章</span></a></div><div class="item categories"><a href="/categories/"><span class="count">7</span><span class="name">分类</span></a></div><div class="item tags"><a href="/tags/"><span class="count">10</span><span class="name">标签</span></a></div></nav><div class="social"><a target="_blank" rel="noopener" href="https://github.com/ElainaX" class="item github" title="https://github.com/ElainaX"><i class="ic i-github"></i></a><a href="mailto:1578349179@qq.com" class="item email" title="mailto:1578349179@qq.com"><i class="ic i-envelope"></i></a></div><div class="menu"><li class="item"><a href="/" rel="section"><i class="ic i-home"></i>首页</a></li><li class="item dropdown"><a href="#" onclick="return false;"><i class="ic i-user"></i>关于</a><ul class="submenu"><li class="item"><a href="/about-me" rel="section"><i class="ic i-cloud"></i>about-me</a></li></ul></li><li class="item"><a href="/friend-link" rel="section"><i class="ic i-coffee"></i>friend-link</a></li></div></div></div></div><ul id="quick"><li class="prev pjax"><a href="/2024%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86%E5%BD%95" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>随机文章</h2><ul><li class="item"><div class="breadcrumb"></div><span><a href="/computer-science/computer-graphics/game-engine/hazel/Hazel%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89">未命名</a></span></li><li class="item"><div class="breadcrumb"></div><span><a href="/friend-link">friend-link</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/%E6%9D%82%E8%B0%88/" title="分类于杂谈">杂谈</a></div><span><a href="/2024%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%9B%9E%E5%BF%86%E5%BD%95">2024暑期实习面试回忆录</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/computer-science/" title="分类于计算机">计算机</a><i class="ic i-angle-right"></i><a href="/categories/computer-science/computer-graphics/" title="分类于图形学">图形学</a><i class="ic i-angle-right"></i><a href="/categories/computer-science/computer-graphics/game-engine/" title="分类于游戏引擎">游戏引擎</a><i class="ic i-angle-right"></i><a href="/categories/computer-science/computer-graphics/game-engine/dx12/" title="分类于DirectX">DirectX</a></div><span><a href="/%E5%85%B3%E4%BA%8EDirectX12%E4%B8%AD%E7%9A%84%E8%A1%8C%E4%B8%BB%E5%BA%8F%E4%B8%8E%E5%88%97%E4%B8%BB%E5%BA%8F%EF%BC%8C%E4%BD%A0%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87">关于DirectX12中的行主序与列主序，你想知道的一切</a></span></li><li class="item"><div class="breadcrumb"></div><span><a href="/hello-world">Hello World</a></span></li><li class="item"><div class="breadcrumb"><a href="/categories/computer-science/" title="分类于计算机">计算机</a><i class="ic i-angle-right"></i><a href="/categories/computer-science/cpp/" title="分类于C++">C++</a><i class="ic i-angle-right"></i><a href="/categories/computer-science/cpp/cpp-reflection/" title="分类于C++反射">C++反射</a></div><span><a href="/C++%E5%8F%8D%E5%B0%84%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89%E6%A8%A1%E6%9D%BF%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8">C++反射初探（一）模板介绍与使用</a></span></li><li class="item"><div class="breadcrumb"></div><span><a href="/about-me">about-me</a></span></li></ul></div><div class="rpost pjax"><h2>最新评论</h2><ul class="leancloud-recent-comment" id="new-comment"></ul></div></div><div class="status"><div class="copyright">© 2024 -<span itemprop="copyrightYear">2024</span><span class="with-love"><i class="ic i-sakura rotate"></i></span><span class="author" itemprop="copyrightHolder">ElainaX @ 以真理为友</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i></span><span title="站点总字数">26k 字</span><span class="post-meta-divider"> | </span><span class="post-meta-item-icon"><i class="ic i-coffee"></i></span><span title="站点阅读时长">24 分钟</span></div><div class="powered-by">基于 <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a> &amp; Theme.<a target="_blank" rel="noopener" href="https://github.com/theme-shoka-x/hexo-theme-shokaX/">ShokaX</a></div></div></div></footer></div><script data-config="" type="text/javascript">var LOCAL = {
    ispost: true,
        path: `/C++反射初探（一）模板介绍与使用`,
        favicon: {
        show: `（●´3｀●）やれやれだぜ`,
        hide: `(´Д｀)大変だ！`
    },
    search: {
        placeholder: "文章搜索",
        empty: "关于 「 ${query} 」，什么也没搜到",
        stats: "${time} ms 内找到 ${hits} 条结果"
    },
    copy_tex: true,
    katex: true,
    mermaid: false,
    audio: {},
    fancybox: true,
    nocopy: false,
    outime: true,
    template: `<div class="note warning"><p><span class="label warning">文章时效性提示</span><br>这是一篇发布于 {{publish}} 天前，最后一次更新在 {{updated}} 天前的文章，部分信息可能已经发生改变，请注意甄别。</p></div>`,
    quiz: {
        choice: `单选题`,
        multiple: `多选题`,
        true_false: `判断题`,
        essay: `问答题`,
        gap_fill: `填空题`,
        mistake: `错题备注`
    },
    ignores: [
        (uri) => uri.includes('#'),
        (uri) => new RegExp(LOCAL.path + '$').test(uri),
            []
    ]
};
</script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/pace/1.2.4/pace.min.js" async=""></script><script src="/js/siteInit.js?v=0.4.2" type="module" fetchpriority="high" defer=""></script></body></html>